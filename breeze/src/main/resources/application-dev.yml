spring:
  data:
    redis:
      database: 0
      host: ${BREEZE_REDIS_HOST:breeze-redis}
      port: ${BREEZE_REDIS_PORT:6379}
      password: ${BREEZE_REDIS_PASSWORD:breeze}
      timeout: 10s
      lettuce:
        pool:
          # 连接池最大连接数 默认8 ，负数表示没有限制
          max-active: 8
          # 连接池最大阻塞等待时间（使用负值表示没有限制） 默认-1
          max-wait: -1
          # 连接池中的最大空闲连接 默认8
          max-idle: 8
          # 连接池中的最小空闲连接 默认0
          min-idle: 0

    # MongoDB 配置
    mongodb:
      uri: mongodb://${BREEZE_MONGO_USER_PWD}@${BREEZE_MONGO_HOST}/breeze_chat?authSource=admin

  cache:
    # 缓存类型 redis、none(不使用缓存)
    type: redis

  # 人工智能相关配置
  ai:
    chat:
      client:
        enabled: false

    # 阿里云魔搭平台（DashScope）相关配置
    dashscope:
      api-key: ${BREEZE_DASH_KEY}
      embedding:
        enabled: true
    # Ollama 相关配置
    ollama:
      base-url: http://localhost:11434
      embedding:
        enabled: true

    # 向量存储相关配置
    vectorstore:
      # 配置 Elasticsearch 作为向量存储
      elasticsearch:
        # 启用 Elasticsearch 向量存储功能
        enabled: true
        # 指定 Elasticsearch 中用于存储向量数据的索引名称，所有向量数据都会存储在这个名为 breeze_chat_index 的索引中
        index-name: breeze_chat_index
        # 定义向量相似度搜索时使用的相似度度量方法，这里使用余弦相似度，余弦值越接近 1 表示两个向量越相似
        similarity: cosine
        # 明确向量的维度，存储和检索的向量维度必须与此配置一致
        dimensions: 1536
        # 控制是否在启动时初始化 Elasticsearch 的数据结构和索引，设置为 true 会确保 Elasticsearch 数据库的结构符合向量存储要求
        initialize-schema: false


      # 配置 Redis 作为向量存储
      redis:
        # 启用 Redis 向量存储功能
        enabled: true
        host: 127.0.0.1
        port: 6379
        password: breeze
        # 控制是否在启动时初始化 Redis 的数据结构和索引，设置为 true 会确保 Redis 数据库的结构符合向量存储要求
        initialize-schema: false
        # 为存储在 Redis 中的键添加前缀 有助于区分不同类型的数据，所有向量存储相关的键都会以该前缀开头
        prefix: "breeze_chat_embedding:"
        # 指定 Redis 中用于存储向量数据的索引名称 与 Elasticsearch 中的索引名称保持一致，方便数据同步和管理
        index: "breeze_chat_index"

  elasticsearch:
    uris: ${BREEZE_ES_HOST}

  # 数据源配置
  datasource:
    dynamic:
      # 默认数据源，默认master
      primary: master
      # 严格匹配数据源,默认false. true未匹配到指定数据源时抛异常,false使用默认数据源
      strict: true
      # 数据库连接信息配置
      datasource:
        # 主库
        master:
          url: jdbc:mysql://${BREEZE_MYSQL_HOST:breeze-mysql:3306}/breeze_boot_17?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8
          driver-class-name: com.mysql.cj.jdbc.Driver
          username: root
          password: ${BREEZE_MYSQL_PWD:root}
          type: com.alibaba.druid.pool.DruidDataSource
    druid:
      initial-size: 5
      min-idle: 10
      max-active: 20
      max-wait: 60000
      min-evictable-idle-time-millis: 300000
      time-between-eviction-runs-millis: 50000
      # 配置插件：stat-监控统计，日志，wall-防火墙（防止SQL注入），
      # ps：去掉后，监控界面的sql无法统计
      filters: stat,wall
      # 检测连接是否有效的 SQL语句，为空时以下三个配置均无效
      validation-query: SELECT 1
      # 申请连接时执行validationQuery检测连接是否有效，默认true，开启后会降低性能
      test-on-borrow: true
      # 归还连接时执行validationQuery检测连接是否有效，默认false，开启后会降低性能
      test-on-return: true
      # 申请连接时如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效，默认false，建议开启，不影响性能
      test-while-idle: true
      # 过滤慢sql
      filter:
        stat:
          db-type: mysql
          # 开启 FilterStat，默认true
          enabled: true
          # 开启 慢SQL 记录，默认false
          log-slow-sql: true
          # 是否是慢SQL，默认 3000ms
          slow-sql-millis: 5000
          # 合并多个连接池的监控数据，默认false
          merge-sql: false
        wall:
          db-type: mysql
          config:
            multi-statement-allow: true
      # 开启StatViewServlet
      stat-view-servlet:
        enabled: true
        reset-enable: false
        allow: 127.0.0.1
        url-pattern: /druid/*
        login-username: ${BREEZE-DRUID-USERNAME:admin}
        login-password: ${BREEZE-DRUID-PASSWORD:admin}
        deny:
      # 配置WebStatFilter，用于采集web关联监控的数据
      web-stat-filter:
        # 开启监控
        enabled: true
        url-pattern: /*
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"
        session-stat-enable: true
        session-stat-max-count: 1000

  rabbitmq:
    addresses: ${BREEZE_MQ_HOST:breeze-rabbitmq}
    port: ${BREEZE_MQ_PORT:5672}
    virtual-host: /
    username: admin
    password: 123456
    stomp-port: ${BREEZE_STOMP_PORT:61613}
    #连接超时时间
    connection-timeout: 15000
    # CORRELATED值是发布消息成功到交换器后会触发回调
    publisher-confirm-type: correlated
    publisher-returns: true
    template:
      mandatory: true
    #消费端配置
    listener:
      simple:
        #消费端
        concurrency: 5
        #最大消费端数
        max-concurrency: 10
        #自动签收auto  手动 manual
        acknowledge-mode: manual
        #限流（同时只能过来一条）
        prefetch: 1

breeze:
  # 本地硬盘存储配置
  local:
    nginx-host: http://localhost:9000/img/
  # oss s3 配置
  oss:
    s3:
      minio:
        domain-url: ${BREEZE_OSS_HOST:http://breeze-minio}:9092/
        endpoint: ${BREEZE_OSS_HOST:http://breeze-minio}:9092/
        access-key: admin
        access-key-secret: 12345678
      cos:
        domain-url: http://localhost:9092/
        endpoint: http://localhost:9092
        access-key: admin
        access-key-secret: 12345678
      kodo:
        domain-url: http://localhost:9092/
        endpoint: http://localhost:9092
        access-key: admin
        access-key-secret: 12345678

# langchain4j配置
langchain4j:
  community:
    dashscope:
      #集成阿里通义千问-流式输出
      streaming-chat-model:
        api-key: ${BREEZE_DASH_KEY}
        model-name: qwen-max
      #集成阿里通义千问-通用文本向量-v3
      embedding-model:
        api-key: ${BREEZE_DASH_KEY}
        model-name: text-embedding-v3
      tokenizer:
        api-key: ${BREEZE_DASH_KEY}

sms:
  # 标注从yml读取配置
  config-type: yaml
  # 账户上限
  account-max: 1
  blends:
    # 阿里短信
    ali:
      #厂商标识，标定此配置是哪个厂商，详细请看厂商标识介绍部分
      supplier: alibaba
      #您的accessKey
      access-key-id:
      #您的accessKeySecret
      access-key-secret:
      #您的短信签名
      signature:
